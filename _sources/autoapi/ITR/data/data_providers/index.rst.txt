:py:mod:`ITR.data.data_providers`
=================================

.. py:module:: ITR.data.data_providers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ITR.data.data_providers.CompanyDataProvider
   ITR.data.data_providers.ProductionBenchmarkDataProvider
   ITR.data.data_providers.IntensityBenchmarkDataProvider




.. py:class:: CompanyDataProvider(**kwargs)


   Bases: :py:obj:`abc.ABC`

   Company data provider super class.
   Data container for company specific data. It expects both Fundamental (e.g. Company revenue, marktetcap etc) and
   emission and target data per company.

   Initialized CompanyDataProvider is required when setting up a data warehouse instance.

   .. py:method:: get_projection_controls() -> ITR.configs.ProjectionControls
      :abstractmethod:

      Return the ProjectionControls associated with this CompanyDataProvider.


   .. py:method:: get_company_ids() -> List[str]
      :abstractmethod:

      Return the list of Company IDs of this CompanyDataProvider


   .. py:method:: get_company_data(company_ids: Optional[List[str]] = None) -> List[ITR.interfaces.ICompanyData]
      :abstractmethod:

      Get all relevant data for a list of company ids (ISIN), or all company data if `company_ids` is None.
      This method should return a list of ICompanyData instances.

      :param company_ids: A list of company IDs (ISINs)
      :return: A list containing the company data


   .. py:method:: get_value(company_ids: List[str], variable_name: str) -> pandas.Series
      :abstractmethod:

      Gets the value of a variable for a list of companies ids
      :param company_ids: list of company ids
      :param variable_name: variable name of the projected feature
      :return: series of values


   .. py:method:: get_company_intensity_and_production_at_base_year(company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Get the emission intensity and the production for a list of companies at the base year.
      :param: company_ids: list of company ids
      :return: DataFrame the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.GHG_S1S2, ColumnsConfig.BASE_EI, ColumnsConfig.SECTOR and
      ColumnsConfig.REGION


   .. py:method:: get_company_projected_trajectories(company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Gets the emission intensities for a list of companies
      :param company_ids: list of company ids
      :return: dataframe of projected intensity trajectories for each company in company_ids


   .. py:method:: get_company_projected_targets(company_ids: List[str]) -> pandas.DataFrame
      :abstractmethod:

      Gets the projected targets for a list of companies
      :param company_ids: list of company ids
      :return: dataframe of projected intensity targets for each company in company_ids


   .. py:method:: _allocate_emissions(new_companies: List[ITR.interfaces.ICompanyData], ei_benchmarks: IntensityBenchmarkDataProvider, projection_controls: ITR.configs.ProjectionControls)
      :abstractmethod:

      Use benchmark data from `ei_benchmarks` to allocate sector-level emissions from aggregated emissions.
      For example, a Utility may supply both Electricity and Gas to customers, reported separately.
      When we split the company into Electricity and Gas lines of business, we can allocate Scope emissions
      to the respective lines of business using benchmark averages to guide the allocation.


   .. py:method:: _validate_projected_trajectories(companies: List[ITR.interfaces.ICompanyData], ei_bm: IntensityBenchmarkDataProvider)
      :abstractmethod:

      Called when benchmark data is first known, or when projection control parameters or benchmark data changes.
      COMPANY_IDS are a list of companies with historic data that need to be projected.
      EI_BENCHMARKS are the benchmarks for all sectors, regions, and scopes
      In previous incarnations of this function, no benchmark data was needed for any reason.


   .. py:method:: _calculate_target_projections(production_bm: ProductionBenchmarkDataProvider, ei_bm: IntensityBenchmarkDataProvider)
      :abstractmethod:

      Use benchmark data to calculate target projections



.. py:class:: ProductionBenchmarkDataProvider(**kwargs)


   Bases: :py:obj:`abc.ABC`

   Production projecton data provider super class.

   This Data Container contains Production data on benchmark level. Data has a regions and sector indices.
   Initialized ProductionBenchmarkDataProvider is required when setting up a data warehouse instance.

   .. py:method:: benchmark_changed(production_benchmark: ProductionBenchmarkDataProvider) -> bool
      :abstractmethod:


   .. py:method:: get_company_projected_production(ghg_scope12: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      get the projected productions for all companies in ghg_scope12
      :param ghg_scope12: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.GHG_S1S2, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: Dataframe of projected productions for [base_year - base_year + 50]


   .. py:method:: get_benchmark_projections(company_secor_region_info: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      get the sector emissions for a list of companies.
      If there is no data for the sector, then it will be replaced by the global value
      :param company_secor_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and intensity benchmarks per calendar year per row



.. py:class:: IntensityBenchmarkDataProvider(benchmark_temperature: ITR.data.osc_units.delta_degC_Quantity, benchmark_global_budget: ITR.data.osc_units.EmissionsQuantity, is_AFOLU_included: bool, **kwargs)


   Bases: :py:obj:`abc.ABC`

   Production intensity data provider super class.
   This Data Container contains emission intensity data on benchmark level. Data has a regions and sector indices.
   Initialized IntensityBenchmarkDataProvider is required when setting up a data warehouse instance.

   .. py:property:: is_AFOLU_included
      :type: bool

      :return: if AFOLU is included in the benchmarks global budget


   .. py:property:: benchmark_temperature
      :type: ITR.data.osc_units.delta_degC_Quantity

      :return: assumed temperature for the benchmark. for OECM 1.5C for example


   .. py:property:: benchmark_global_budget
      :type: ITR.data.osc_units.EmissionsQuantity

      :return: Benchmark provider assumed global budget. if AFOLU is not included global budget is divided by 0.76


   .. py:attribute:: AFOLU_CORRECTION_FACTOR
      :value: 0.76

      

   .. py:method:: get_scopes() -> List[ITR.interfaces.EScope]
      :abstractmethod:


   .. py:method:: benchmarks_changed(ei_benchmarks: IntensityBenchmarkDataProvider) -> bool
      :abstractmethod:


   .. py:method:: prod_centric_changed(ei_benchmarks: IntensityBenchmarkDataProvider) -> bool
      :abstractmethod:


   .. py:method:: _get_intensity_benchmarks(company_sector_region_info: Optional[pandas.DataFrame] = None) -> pandas.DataFrame
      :abstractmethod:

      returns a Dataframe with intensity benchmarks per company_id given a region and sector.
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and intensity benchmarks per calendar year per row


   .. py:method:: get_SDA_intensity_benchmarks(company_sector_region_info: pandas.DataFrame) -> pandas.DataFrame
      :abstractmethod:

      returns a Dataframe with intensity benchmarks per company_id given a region and sector.
      :param company_sector_region_info: DataFrame with at least the following columns :
      ColumnsConfig.COMPANY_ID, ColumnsConfig.SECTOR and ColumnsConfig.REGION
      :return: A DataFrame with company and intensity benchmarks per calendar year per row


   .. py:method:: is_production_centric() -> bool
      :abstractmethod:

      returns True if benchmark is "production_centric" (as defined by OECM)



