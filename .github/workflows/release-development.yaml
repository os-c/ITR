---
name: "🐍📦 Test build and release"

# GitHub/PyPI trusted publisher documentation:
# https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:

env:
  python-version: "3.10"


### BUILD ###

jobs:
  build:
    name: "🐍 Build packages"
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for Sigstore
    steps:

      ### BUILDING ###

      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Populate environment variables"
        id: setenv
        run: |
          set -x
          VARS_FILE=dist/buildvars.txt
          mkdir -p dist || true
          touch dist/buildvars.txt
          datetime=$(date +'%Y%m%d%H%M')
          export datetime
          echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"
          echo "datetime=${datetime}" >> "$VARS_FILE"
          pyver=${{ env.python-version }}
          echo "pyver=${pyver}" >> "$GITHUB_OUTPUT"
          echo "pyver=${pyver}" >> "$VARS_FILE"
          vernum="${pyver}.${datetime}"
          echo "vernum=${vernum}" >> "$GITHUB_OUTPUT"
          echo "vernum=${vernum}" >> "$VARS_FILE"

      - name: "Setup Python 3.10"
        uses: actions/setup-python@v4.7.0
        with:
          python-version: ${{ env.python-version }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions

      - name: "Tag for test release"
        # Delete all local tags, then create a synthetic tag for testing
        # Use the date/time to avoid conflicts uploading to Test PyPI
        run: |
          scripts/dev-versioning.sh "${{ steps.setenv.outputs.vernum }}"
          git tag | xargs -L 1 | xargs git tag --delete
          git tag "v${{ steps.setenv.outputs.vernum }}"
          git checkout "tags/v${{ steps.setenv.outputs.vernum }}"
          grep version pyproject.toml

      - name: "Build with TOX"
        run: |
          tox -e build

      ### SIGNING ###

      - name: "Sign packages with Sigstore"
        uses: sigstore/gh-action-sigstore-python@v1.2.3
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: Development
          path: dist/


  ### PUBLISH GITHUB ###

  github:
    # Only publish to PyPI on tag pushes
    # if: startsWith(github.ref, 'refs/tags/')
    name: "📦 Test publish to GitHub"
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      # IMPORTANT: mandatory for Sigstore and trusted publishing
      id-token: write
    steps:

      - name: "⬇ Download build artefacts"
        uses: actions/download-artifact@v3
        with:
          name: Development
          path: dist/

      - name: "Source environment variables"
        id: setenv
        run: |
          set -x
          source dist/buildvars.txt
          echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"
          echo "Datetime is: ${datetime}"
          echo "pyver=${pyver}" >> "$GITHUB_OUTPUT"
          echo "Python version is: ${pyver}"
          echo "vernum=${vernum}" >> "$GITHUB_OUTPUT"
          echo "Version number is: ${vernum}"


      - name: "📦 Publish packages to GitHub"
        uses: ModeSevenIndustrialSolutions/action-automatic-releases@latest
        with:
          # Valid inputs are:
          # repo_token, automatic_release_tag, draft, prerelease, title, files
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          automatic_release_tag: ${{ steps.setenv.outputs.vernum }}
          title:
            "Development Build \
            ${{ steps.setenv.outputs.vernum }}"
          files: |
            dist/*.tar.gz
            dist/*.whl


  ### PUBLISH TEST PYPI ###

  testpypi:
    # Only publish to PyPI on tag pushes
    # if: startsWith(github.ref, 'refs/tags/')
    name: "📦 Test publish to PyPi"
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/project/ITR/
    permissions:
      # IMPORTANT: mandatory for trusted publishing
      id-token: write
    steps:

      - name: "⬇ Download build artefacts"
        uses: actions/download-artifact@v3
        with:
          name: Development
          path: dist/

      - name: "Remove files unsupported by PyPi"
        run: |
          rm dist/*.txt dist/*.crt dist/*.sig*

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
